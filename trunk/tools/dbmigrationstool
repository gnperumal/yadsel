#!/usr/bin/env python

"""
This module provide a tool for doing migration by a shell line
@author Marinho Brandao
@creation 2007-05-25
"""

import sys
from yadsel import core, drivers

def print_header():
    print "DBMigrations // http://code.google.com/p/yadsel/\n"

def print_help():
    temp = [
            "You must declare likes this sintax:",
            "",
            "dbmigrationstool <path_with_version_files> [up|down] [new_version_number]"
           ]

    print ''.join([l+"\n" for l in temp])

def do(versions_path, action='up', new_version=None):
    controller = core.Controller(drivers.SQLite)

    print "Driver: %s" % controller.driver.__class__.__name__

    controller.load_versions_from_path(versions_path)

    if action == 'up':
        print "Upgrading..."
        script = controller.script_for_upgrade(to=new_version)
    elif action == 'down':
        print "Downgrading..."
        script = controller.script_for_downgrade(to=new_version)

    for v in script:
        print "/* Version", v, "*/"
        for cmd in script[v]:
            print "", cmd

if __name__ == '__main__':
    print_header()

    if not len(sys.argv) in [2,3,4]:
        print_help()
    else:
        args = []
        for i in range(1,4):
            if len(sys.argv) > i:
                args.append(sys.argv[i])
            else:
                args.append(None)

        versions_path, action, new_version = args
        action = action or 'up'
        new_version = new_version or 0

        # Does (up|down)grade
        do(versions_path, action, int(new_version))

