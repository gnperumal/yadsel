#!/usr/bin/env python

"""
This module provide a tool for doing migration by a shell line
@author Marinho Brandao
@creation 2007-05-25
"""

import sys
from yadsel import core, drivers

AVAILABLE_ACTIONS = ( core.ACTION_UP, core.ACTION_DOWN, )

MODE_HIDDEN = 'hidden'
MODE_STEPS = 'steps'
MODE_INTERACTIVE = 'interactive'
MODE_OUTPUT = 'output'
AVAILABLE_MODES = ( MODE_HIDDEN, MODE_STEPS, MODE_INTERACTIVE, MODE_OUTPUT, )

def print_header():
    print "Yadsel Tool // http://code.google.com/p/yadsel/\n"

def print_help():
    temp = [
            "Invalid syntax. You must declare required parameters, like below:",
            "",
            "  path=<version_files_path>\trequired",
            "  dsn=<dsn>\t\t\trequired",
            "  user=<username>\t\trequired",
            "  pass=<password>\t\toptional. Default: empty",
            "  from=<current_version>\toptional. Default: latest version of history control",
            "  to=<new_version_number>\toptional. Default: latest available version",
            "  action=[%s]\t\toptional. Default: %s" %( ''.join([m+'|' for m in AVAILABLE_ACTIONS][:-1]), core.ACTION_UP ),
            "  mode=[%s]\t\toptional. Default: %s" %( ''.join([m+'|' for m in AVAILABLE_MODES][:-1]), MODE_HIDDEN ),
            "  test\t\t\t\toptional. Turns off persistent changings on database",
            "  history\t\t\toptional. Turns on history control on database",
           ]

    print ''.join([l+"\n" for l in temp])

def print_if( condition, s ):
    if condition: print s

def do(versions_path, driver_type, dsn, user, passwd, action, 
       current_version, new_version, mode, test, history):
    if driver_type == "firebird":
        try:
            import kinterbasdb
        except:
            print "A Python extension called 'kinterbasdb' was not found!"
            sys.exit(1)

        connection = kinterbasdb.connect(dsn=dsn, user=user, password=passwd)
        driver = drivers.Firebird
    elif driver_type == "mssql":
        try:
            import pymssql
        except:
            print "A Python extension called 'pymssql' was not found!"
            sys.exit(1)

        connection = None #pymssql.connect(dsn=dsn, user=user, password=passwd)
        driver = drivers.MSSQL
    elif driver_type == "mysql":
        driver = drivers.MySQL
    elif driver_type == "sqlite":
        try:
            from pysqlite2 import dbapi2 as sqlite
        except:
            print "A Python extension called 'pysqlite2' was not found!"
            sys.exit(1)

        connection = sqlite.connect(dsn)
        driver = drivers.SQLite
    else:
        print "Only drivers 'Firebird', 'MySQL' and 'SQLite' are supported!"
        sys.exit(1)

    # Instantiates version controller
    controller = core.Controller(driver, connection=connection)

    print_if( mode != MODE_HIDDEN, "Driver: %s" % controller.driver.__class__.__name__ )

    # Gets current version
    if history and not current_version:
        controller.load_current_version_from_history()
    else:
        controller.current_version = current_version

    controller.load_versions_from_path(versions_path)

    if action == core.ACTION_UP:
        print_if( mode != MODE_HIDDEN, "Upgrading..." )

        # Prints script if mode is 'output'
        if mode == MODE_OUTPUT:
            script = controller.script_for_upgrade(to=new_version)

            # Print scripts
            for v in script:
                print "/* Version", v, "*/"
                for cmd in script[v]:
                    print "", cmd
        elif mode == MODE_HIDDEN:
            controller.upgrade(test=test)
        elif mode == MODE_STEPS:
            # First step for build scripts for cache and gets steps count
            controller.upgrade(cacheable=True, force=True, step=0, test=test)
            print 'Step %d of %d: ""' %( 1, controller.cache['steps_count'] )

            # Loop for next steps (if exists)
            if controller.cache['steps_count'] > 1:
                for i in range(1, controller.cache['steps_count']):
                    controller.upgrade(cacheable=True, step=i, test=test)
                    print 'Step %d of %d: "%s"' %( i+1, controller.cache['steps_count'], "" )
        else:
            controller.upgrade(test=test)
            
    elif action == core.ACTION_DOWN:
        print_if( mode != MODE_HIDDEN, "Downgrading..." )

        # Prints script if mode is 'output'
        if mode == MODE_OUTPUT:
            script = controller.script_for_downgrade(to=new_version)

            # Print scripts
            for v in script:
                print "/* Version", v, "*/"
                for cmd in script[v]:
                    print "", cmd
        elif mode == MODE_HIDDEN:
            controller.downgrade(test=test)
        elif mode == MODE_STEPS:
            # First step for build scripts for cache and gets steps count
            controller.downgrade(cacheable=True, force=True, step=0, test=test)
            print 'Step %d of %d: ""' %( 1, controller.cache['steps_count'] )

            # Loop for next steps (if exists)
            if controller.cache['steps_count'] > 1:
                for i in range(1, controller.cache['steps_count']):
                    controller.downgrade(cacheable=True, step=i, test=test)
                    print 'Step %d of %d: "%s"' %( i+1, controller.cache['steps_count'], "" )
        else:
            controller.downgrade(test=test)

if __name__ == '__main__':
    print_header()

    versions_path = dsn = user = current_version = None
    action = core.ACTION_UP
    new_version = 0
    passwd = ''
    mode = MODE_HIDDEN
    test = history = False

    for arg in sys.argv:
        if arg.startswith('path='):
            versions_path = arg.split('=')[1]
        elif arg.startswith('driver='):
            driver_type = arg.split('=')[1].lower()
        elif arg.startswith('dsn='):
            dsn = arg.split('=')[1]
        elif arg.startswith('user='):
            user = arg.split('=')[1] or action
        elif arg.startswith('pass='):
            passwd = arg.split('=')[1]
        elif arg.startswith('action='):
            action = arg.split('=')[1] or passwd
        elif arg.startswith('from='):
            current_version = int(arg.split('=')[1])
        elif arg.startswith('to='):
            new_version = int(arg.split('=')[1]) or new_version
        elif arg.startswith('mode='):
            mode = arg.split('=')[1]
        elif arg == 'test':
            test = True
        elif arg == 'history':
            history = True

    if not(versions_path or dsn or user or current_version):
        print_help()
        sys.exit(1)

    # Does the (up|down)grade
    do(versions_path=versions_path,
       driver_type=driver_type,
       dsn=dsn,
       action=action,
       user=user,
       passwd=passwd,
       current_version=current_version,
       new_version=new_version,
       mode=mode,
       test=test,
       history=history,
       )

